//-----------------------------------------------------------------------
// <copyright file="SmartDetectorRunner.cs" company="Microsoft Corporation">
// Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>
//-----------------------------------------------------------------------

namespace Microsoft.Azure.Monitoring.SmartDetectors.MonitoringAppliance.Analysis
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Azure.Monitoring.SmartDetectors;
    using Microsoft.Azure.Monitoring.SmartDetectors.Clients;
    using Microsoft.Azure.Monitoring.SmartDetectors.Extensions;
    using Microsoft.Azure.Monitoring.SmartDetectors.Loader;
    using Microsoft.Azure.Monitoring.SmartDetectors.MonitoringAppliance;
    using Microsoft.Azure.Monitoring.SmartDetectors.MonitoringAppliance.Exceptions;
    using Microsoft.Azure.Monitoring.SmartDetectors.MonitoringAppliance.Trace;
    using Microsoft.Azure.Monitoring.SmartDetectors.Package;
    using Microsoft.Azure.Monitoring.SmartDetectors.RuntimeEnvironment.Contracts;
    using Microsoft.Azure.Monitoring.SmartDetectors.State;
    using Microsoft.Azure.Monitoring.SmartDetectors.Tools;
    using Microsoft.Azure.Monitoring.SmartDetectors.Trace;
    using Alert = Microsoft.Azure.Monitoring.SmartDetectors.Alert;
    using AutomaticResolutionCheckRequest = Microsoft.Azure.Monitoring.SmartDetectors.AutomaticResolutionCheckRequest;
    using AutomaticResolutionCheckResponse = Microsoft.Azure.Monitoring.SmartDetectors.AutomaticResolutionCheckResponse;
    using ContractsAlert = Microsoft.Azure.Monitoring.SmartDetectors.RuntimeEnvironment.Contracts.Alert;
    using ContractsAutomaticResolutionCheckRequest = Microsoft.Azure.Monitoring.SmartDetectors.RuntimeEnvironment.Contracts.AutomaticResolutionCheckRequest;
    using ContractsAutomaticResolutionCheckResponse = Microsoft.Azure.Monitoring.SmartDetectors.RuntimeEnvironment.Contracts.AutomaticResolutionCheckResponse;
    using ResourceType = Microsoft.Azure.Monitoring.SmartDetectors.ResourceType;

    /// <summary>
    /// An implementation of <see cref="ISmartDetectorRunner"/>, that loads the Smart Detector and runs it
    /// </summary>
    public class SmartDetectorRunner : ISmartDetectorRunner
    {
        private readonly ISmartDetectorRepository smartDetectorRepository;
        private readonly ISmartDetectorLoader smartDetectorLoader;
        private readonly IInternalAnalysisServicesFactory analysisServicesFactory;
        private readonly IExtendedAzureResourceManagerClient azureResourceManagerClient;
        private readonly IStateRepositoryFactory stateRepositoryFactory;
        private readonly IExtendedTracer tracer;

        /// <summary>
        /// Initializes a new instance of the <see cref="SmartDetectorRunner"/> class
        /// </summary>
        /// <param name="smartDetectorRepository">The Smart Detector repository</param>
        /// <param name="smartDetectorLoader">The Smart Detector loader</param>
        /// <param name="analysisServicesFactory">The analysis services factory</param>
        /// <param name="azureResourceManagerClient">The Azure Resource Manager client</param>
        /// <param name="stateRepositoryFactory">The state repository factory</param>
        /// <param name="tracer">The tracer</param>
        public SmartDetectorRunner(
            ISmartDetectorRepository smartDetectorRepository,
            ISmartDetectorLoader smartDetectorLoader,
            IInternalAnalysisServicesFactory analysisServicesFactory,
            IExtendedAzureResourceManagerClient azureResourceManagerClient,
            IStateRepositoryFactory stateRepositoryFactory,
            IExtendedTracer tracer)
        {
            this.smartDetectorRepository = Diagnostics.EnsureArgumentNotNull(() => smartDetectorRepository);
            this.smartDetectorLoader = Diagnostics.EnsureArgumentNotNull(() => smartDetectorLoader);
            this.analysisServicesFactory = Diagnostics.EnsureArgumentNotNull(() => analysisServicesFactory);
            this.azureResourceManagerClient = Diagnostics.EnsureArgumentNotNull(() => azureResourceManagerClient);
            this.stateRepositoryFactory = Diagnostics.EnsureArgumentNotNull(() => stateRepositoryFactory);
            this.tracer = tracer;
        }

        #region Implementation of ISmartDetectorRunner

        /// <summary>
        /// Loads the Smart Detector, runs its analysis flow, and returns the generated alert.
        /// </summary>
        /// <param name="request">The Smart Detector analysis request</param>
        /// <param name="shouldDetectorTrace">Determines if the detector's traces are emitted</param>
        /// <param name="cancellationToken">The cancellation token</param>
        /// <returns>A <see cref="Task{TResult}"/>, returning the list of Alerts generated by the Smart Detector.</returns>
        public async Task<List<ContractsAlert>> AnalyzeAsync(SmartDetectorAnalysisRequest request, bool shouldDetectorTrace, CancellationToken cancellationToken)
        {
            return await this.LoadAndRunSmartDetector(
                request.SmartDetectorId,
                shouldDetectorTrace,
                request,
                this.AnalyzeAsync,
                cancellationToken);
        }

        /// <summary>
        /// Runs the Smart Detector's automatic resolution check flow.
        /// </summary>
        /// <param name="request">The automatic resolution check request.</param>
        /// <param name="shouldDetectorTrace">Determines if the detector's traces are emitted.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A <see cref="Task{TResult}"/>, returning the automatic resolution check response generated by the Smart Detector.</returns>
        public async Task<ContractsAutomaticResolutionCheckResponse> CheckAutomaticResolutionAsync(
            ContractsAutomaticResolutionCheckRequest request,
            bool shouldDetectorTrace,
            CancellationToken cancellationToken)
        {
            return await this.LoadAndRunSmartDetector(
                request.OriginalAnalysisRequest.SmartDetectorId,
                shouldDetectorTrace,
                request,
                this.CheckAutomaticResolutionAsync,
                cancellationToken);
        }

        #endregion

        /// <summary>
        /// Gets the key used for storing the automatic resolution state for the given Alert ID.
        /// </summary>
        /// <param name="alertId">The Alert ID.</param>
        /// <returns>The key used for storing the automatic resolution state the given Alert ID.</returns>
        private static string GetAutomaticResolutionStateKey(string alertId)
        {
            return $"_autoResolve{alertId}";
        }

        /// <summary>
        /// Runs the Smart Detector's analysis flow.
        /// </summary>
        /// <param name="request">The Smart Detector analysis request</param>
        /// <param name="smartDetector">The Smart Detector to run</param>
        /// <param name="smartDetectorManifest">The Smart Detector's manifest</param>
        /// <param name="detectorTracer">The tracer to provider for the Smart Detector</param>
        /// <param name="cancellationToken">The cancellation token</param>
        /// <returns>A <see cref="Task{TResult}"/>, returning the list of Alerts generated by the Smart Detector.</returns>
        private async Task<List<ContractsAlert>> AnalyzeAsync(
            SmartDetectorAnalysisRequest request,
            ISmartDetector smartDetector,
            SmartDetectorManifest smartDetectorManifest,
            ITracer detectorTracer,
            CancellationToken cancellationToken)
        {
            // Create state repository
            IStateRepository stateRepository = this.stateRepositoryFactory.Create(request.SmartDetectorId, request.AlertRuleResourceId);

            // Create the input for the Smart Detector
            AnalysisRequestParameters analysisRequestParameters = await this.CreateAnalysisRequestParametersAsync(request, smartDetectorManifest, true, cancellationToken);
            var analysisRequest = new AnalysisRequest(analysisRequestParameters, this.analysisServicesFactory, stateRepository);

            // Run the Smart Detector
            this.tracer.TraceInformation($"Started running Smart Detector ID {smartDetectorManifest.Id}, Name {smartDetectorManifest.Name}");
            List<Alert> alerts;
            try
            {
                alerts = await smartDetector.AnalyzeResourcesAsync(analysisRequest, detectorTracer, cancellationToken);
                this.tracer.TraceInformation($"Completed running Smart Detector ID {smartDetectorManifest.Id}, Name {smartDetectorManifest.Name}, returning {alerts.Count} alerts");
            }
            catch (Exception e)
            {
                this.tracer.TraceError($"Failed running Smart Detector ID {smartDetectorManifest.Id}, Name {smartDetectorManifest.Name}: {e}");
                throw new FailedToRunSmartDetectorException($"Calling Smart Detector '{smartDetectorManifest.Name}' failed with exception of type {e.GetType()} and message: {e.Message}", e);
            }

            // Verify that each alert belongs to one of the types declared in the Smart Detector manifest
            foreach (Alert alert in alerts)
            {
                if (!smartDetectorManifest.SupportedResourceTypes.Contains(alert.ResourceIdentifier.ResourceType))
                {
                    throw new UnidentifiedAlertResourceTypeException(alert.ResourceIdentifier);
                }
            }

            // Trace the number of alerts of each type
            foreach (var alertType in alerts.GroupBy(x => x.GetType().Name))
            {
                this.tracer.TraceInformation($"Got {alertType.Count()} Alerts of type '{alertType.Key}'");
                this.tracer.ReportMetric("AlertType", alertType.Count(), new Dictionary<string, string>() { { "AlertType", alertType.Key } });
            }

            // Create results
            bool detectorSupportsAutomaticResolution = smartDetector is IAutomaticResolutionSmartDetector;
            List<ContractsAlert> results = new List<ContractsAlert>();
            foreach (var alert in alerts)
            {
                ContractsAlert contractsAlert = alert.CreateContractsAlert(
                    request,
                    smartDetectorManifest.Name,
                    this.analysisServicesFactory.UsedLogAnalysisClient,
                    this.analysisServicesFactory.UsedMetricClient);

                // Handle automatic resolution parameters in the alerts:
                // If the detector supports automatic resolution - save the predicates for the resolution checks
                // If the detector doesn't support automatic resolution - drop the automatic resolution parameters (since they are useless) and error trace
                if (contractsAlert.AutomaticResolutionParameters != null)
                {
                    if (detectorSupportsAutomaticResolution)
                    {
                        this.tracer.TraceInformation($"Alert {contractsAlert.Id} has automatic resolution parameters, so saving alert details for later use");
                        await stateRepository.StoreStateAsync(
                            GetAutomaticResolutionStateKey(contractsAlert.Id),
                            new AutomaticResolutionState
                            {
                                AlertPredicates = alert.ExtractPredicates()
                            },
                            cancellationToken);
                    }
                    else
                    {
                        this.tracer.TraceError($"Dropping automatic resolution parameters from alert {contractsAlert.Id}");
                        contractsAlert.AutomaticResolutionParameters = null;
                    }
                }

                // And add the alert to the results
                results.Add(contractsAlert);
            }

            this.tracer.TraceInformation($"Returning {results.Count} results");
            return results;
        }

        /// <summary>
        /// Runs the Smart Detector's automatic resolution check flow.
        /// </summary>
        /// <param name="request">The automatic resolution check request.</param>
        /// <param name="smartDetector">The Smart Detector to run</param>
        /// <param name="smartDetectorManifest">The Smart Detector's manifest</param>
        /// <param name="detectorTracer">The tracer to provider for the Smart Detector</param>
        /// <param name="cancellationToken">The cancellation token</param>
        /// <returns>A <see cref="Task{TResult}"/>, returning the automatic resolution check response generated by the Smart Detector.</returns>
        private async Task<ContractsAutomaticResolutionCheckResponse> CheckAutomaticResolutionAsync(
            ContractsAutomaticResolutionCheckRequest request,
            ISmartDetector smartDetector,
            SmartDetectorManifest smartDetectorManifest,
            ITracer detectorTracer,
            CancellationToken cancellationToken)
        {
            // Check that the detector supports automatic resolution
            if (!(smartDetector is IAutomaticResolutionSmartDetector automaticResolutionSmartDetector))
            {
                throw new AutomaticResolutionNotSupportedException($"Smart Detector {smartDetectorManifest.Name} does not support alert automatic resolution of alerts");
            }

            // Create state repository
            IStateRepository stateRepository = this.stateRepositoryFactory.Create(request.OriginalAnalysisRequest.SmartDetectorId, request.OriginalAnalysisRequest.AlertRuleResourceId);

            // Load the automatic resolution state from the repository
            AutomaticResolutionState automaticResolutionState = await stateRepository.GetStateAsync<AutomaticResolutionState>(GetAutomaticResolutionStateKey(request.AlertId), cancellationToken);
            if (automaticResolutionState == null)
            {
                throw new AutomaticResolutionStateNotFoundException($"Automatic resolution state for Alert {request.AlertId} was not found");
            }

            // Create the input for the Smart Detector
            AnalysisRequestParameters analysisRequestParameters = await this.CreateAnalysisRequestParametersAsync(request.OriginalAnalysisRequest, smartDetectorManifest, false, cancellationToken);
            var automaticResolutionCheckRequest = new AutomaticResolutionCheckRequest(
                analysisRequestParameters,
                new AutomaticResolutionCheckRequestParameters(ResourceIdentifier.CreateFromResourceId(request.TargetResource), request.AlertFireTime, automaticResolutionState.AlertPredicates),
                this.analysisServicesFactory,
                stateRepository);

            // Run the Smart Detector
            this.tracer.TraceInformation($"Started running Smart Detector ID {smartDetectorManifest.Id}, Name {smartDetectorManifest.Name} for automatic resolution check");
            try
            {
                AutomaticResolutionCheckResponse automaticResolutionCheckResponse =
                    await automaticResolutionSmartDetector.CheckForAutomaticResolutionAsync(automaticResolutionCheckRequest, detectorTracer, cancellationToken);
                this.tracer.TraceInformation($"Completed running Smart Detector ID {smartDetectorManifest.Id}, Name {smartDetectorManifest.Name} for automatic resolution check");

                // If the alert is resolved - delete the state
                if (automaticResolutionCheckResponse.ShouldBeResolved)
                {
                    await stateRepository.DeleteStateAsync(GetAutomaticResolutionStateKey(request.AlertId), cancellationToken);
                }

                // Convert the result
                return new ContractsAutomaticResolutionCheckResponse
                {
                    ShouldBeResolved = automaticResolutionCheckResponse.ShouldBeResolved,
                    AutomaticResolutionParameters = automaticResolutionCheckResponse.AutomaticResolutionParameters?.CreateContractsAutomaticResolutionParameters()
                };
            }
            catch (Exception e)
            {
                this.tracer.TraceError($"Failed running Smart Detector ID {smartDetectorManifest.Id}, Name {smartDetectorManifest.Name} for automatic resolution check: {e}");
                throw new FailedToRunSmartDetectorException($"Calling Smart Detector '{smartDetectorManifest.Name}' for automatic resolution check failed with exception of type {e.GetType()} and message: {e.Message}", e);
            }
        }

        /// <summary>
        /// Loads and runs a specific flow on the requested Smart Detector.
        /// </summary>
        /// <typeparam name="TIn">The flow's primary input type.</typeparam>
        /// <typeparam name="TOut">The flow's output type.</typeparam>
        /// <param name="smartDetectorId">The ID of the Smart Detector to load</param>
        /// <param name="shouldDetectorTrace">Determines if the detector's traces are emitted.</param>
        /// <param name="runnerInput">The flow's input</param>
        /// <param name="flowRunner">A function that runs the Smart Detector Flow.</param>
        /// <param name="cancellationToken">The cancellation token</param>
        /// <returns>A <see cref="Task{TResult}"/>, returning the output returned from <paramref name="flowRunner"/>.</returns>
        private async Task<TOut> LoadAndRunSmartDetector<TIn, TOut>(
            string smartDetectorId,
            bool shouldDetectorTrace,
            TIn runnerInput,
            Func<TIn, ISmartDetector, SmartDetectorManifest, ITracer, CancellationToken, Task<TOut>> flowRunner,
            CancellationToken cancellationToken)
        {
            // Read the Smart Detector's package
            this.tracer.TraceInformation($"Loading Smart Detector package for Smart Detector ID {smartDetectorId}");
            SmartDetectorPackage smartDetectorPackage = await this.smartDetectorRepository.ReadSmartDetectorPackageAsync(smartDetectorId, cancellationToken);
            SmartDetectorManifest smartDetectorManifest = smartDetectorPackage.Manifest;
            this.tracer.TraceInformation($"Read Smart Detector package, ID {smartDetectorManifest.Id}, Version {smartDetectorManifest.Version}");

            // Load the Smart Detector
            ISmartDetector smartDetector = this.smartDetectorLoader.LoadSmartDetector(smartDetectorPackage);
            this.tracer.TraceInformation($"Smart Detector instance loaded successfully, ID {smartDetectorManifest.Id}");

            try
            {
                ITracer detectorTracer = shouldDetectorTrace ? this.tracer : new EmptyTracer();
                return await flowRunner(runnerInput, smartDetector, smartDetectorManifest, detectorTracer, cancellationToken);
            }
            finally
            {
                if (smartDetector is IDisposable disposableSmartDetector)
                {
                    disposableSmartDetector.Dispose();
                }
            }
        }

        /// <summary>
        /// Creates a new instance of the <see cref="AnalysisRequestParameters"/> class, based on <paramref name="request"/>.
        /// </summary>
        /// <param name="request">The analysis request received from Azure Monitoring back-end.</param>
        /// <param name="smartDetectorManifest">The Smart Detector's manifest, used for validations of the request.</param>
        /// <param name="shouldValidateResources">A value indicating whether we should validate that the request's resources are supported by the detector.</param>
        /// <param name="cancellationToken">The cancellation token.</param>
        /// <returns>A <see cref="Task{TResult}"/>, returning the analysis request parameters.</returns>
        private async Task<AnalysisRequestParameters> CreateAnalysisRequestParametersAsync(SmartDetectorAnalysisRequest request, SmartDetectorManifest smartDetectorManifest, bool shouldValidateResources, CancellationToken cancellationToken)
        {
            // Get the resources on which to run the Smart Detector
            List<ResourceIdentifier> resources = shouldValidateResources
                ? await this.GetResourcesForSmartDetector(request.ResourceIds, smartDetectorManifest, cancellationToken)
                : request.ResourceIds.Select(ResourceIdentifier.CreateFromResourceId).ToList();

            return new AnalysisRequestParameters(resources, request.Cadence, request.AlertRuleResourceId, request.DetectorParameters);
        }

        /// <summary>
        /// Verify that the request resource type is supported by the Smart Detector, and enumerate
        /// the resources that the Smart Detector should run on.
        /// </summary>
        /// <param name="requestResourceIds">The request resource Ids</param>
        /// <param name="smartDetectorManifest">The Smart Detector manifest</param>
        /// <param name="cancellationToken">The cancellation token</param>
        /// <returns>A <see cref="Task{TResult}"/>, returning the resource identifiers that the Smart Detector should run on</returns>
        private async Task<List<ResourceIdentifier>> GetResourcesForSmartDetector(IList<string> requestResourceIds, SmartDetectorManifest smartDetectorManifest, CancellationToken cancellationToken)
        {
            HashSet<ResourceIdentifier> resourcesForSmartDetector = new HashSet<ResourceIdentifier>();
            foreach (string requestResourceId in requestResourceIds)
            {
                ResourceIdentifier requestResource = ResourceIdentifier.CreateFromResourceId(requestResourceId);

                if (smartDetectorManifest.SupportedResourceTypes.Contains(requestResource.ResourceType))
                {
                    // If the Smart Detector directly supports the requested resource type, then that's it
                    resourcesForSmartDetector.Add(requestResource);
                }
                else if (requestResource.ResourceType == ResourceType.Subscription && smartDetectorManifest.SupportedResourceTypes.Contains(ResourceType.ResourceGroup))
                {
                    // If the request is for a subscription, and the Smart Detector supports a resource group type, enumerate all resource groups in the requested subscription
                    IList<ResourceIdentifier> resourceGroups = await this.azureResourceManagerClient.GetAllResourceGroupsInSubscriptionAsync(requestResource.SubscriptionId, cancellationToken);
                    resourcesForSmartDetector.UnionWith(resourceGroups);
                    this.tracer.TraceInformation($"Added {resourceGroups.Count} resource groups found in subscription {requestResource.SubscriptionId}");
                }
                else if (requestResource.ResourceType == ResourceType.Subscription)
                {
                    // If the request is for a subscription, enumerate all the resources in the requested subscription that the Smart Detector supports
                    IList<ResourceIdentifier> resources = await this.azureResourceManagerClient.GetAllResourcesInSubscriptionAsync(requestResource.SubscriptionId, smartDetectorManifest.SupportedResourceTypes, cancellationToken);
                    resourcesForSmartDetector.UnionWith(resources);
                    this.tracer.TraceInformation($"Added {resources.Count} resources found in subscription {requestResource.SubscriptionId}");
                }
                else if (requestResource.ResourceType == ResourceType.ResourceGroup && smartDetectorManifest.SupportedResourceTypes.Any(type => type != ResourceType.Subscription))
                {
                    // If the request is for a resource group, and the Smart Detector supports resource types (other than subscription),
                    // enumerate all the resources in the requested resource group that the Smart Detector supports
                    IList<ResourceIdentifier> resources = await this.azureResourceManagerClient.GetAllResourcesInResourceGroupAsync(requestResource.SubscriptionId, requestResource.ResourceGroupName, smartDetectorManifest.SupportedResourceTypes, cancellationToken);
                    resourcesForSmartDetector.UnionWith(resources);
                    this.tracer.TraceInformation($"Added {resources.Count} resources found in the specified resource group in subscription {requestResource.SubscriptionId}");
                }
                else
                {
                    // The Smart Detector does not support the requested resource type
                    throw new IncompatibleResourceTypesException(requestResource.ResourceType, smartDetectorManifest);
                }
            }

            return resourcesForSmartDetector.ToList();
        }
    }
}